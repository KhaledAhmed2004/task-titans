# ===================================================
# API SUMMARY
# ===================================================
# Total endpoints: 16
# Total methods: 23
# Unique tags: 5
# Total schemas: 17
# Total responses: 0
# ===================================================
openapi: 3.0.3
info:
  title: Task Titans API
  description: >
    Complete API documentation for Task Titans application with authentication, user management, and comprehensive
    workflows.


    ## Authentication Flows


    ### User Registration Flow

    **Step 1:** User submits registration data via `POST /user/`

    **Step 2:** System creates account and sends OTP verification email

    **Step 3:** User receives OTP code in email

    **Step 4:** User verifies email via `POST /auth/verify-email` with OTP

    **Step 5:** User account is verified and can now login


    ### Login Flow

    **Step 1:** User submits credentials via `POST /auth/login`

    **Step 2:** System validates credentials and returns JWT access token

    **Step 3:** User includes Bearer token in Authorization header for protected routes

    **Step 4:** Access protected endpoints like profile management


    ### Password Reset Flow

    **Step 1:** User requests password reset via `POST /auth/forget-password`

    **Step 2:** System sends OTP to user's email

    **Step 3:** User verifies OTP via `POST /auth/verify-email`

    **Step 4:** System returns reset token for password change

    **Step 5:** User submits new password via `POST /auth/reset-password` with token

    **Step 6:** Password is updated successfully


    ### Password Change Flow (Authenticated Users)

    **Step 1:** Authenticated user accesses `POST /auth/change-password`

    **Step 2:** User provides current password and new password

    **Step 3:** System validates current password and updates to new password


    ### Rating Flow

    **Step 1:** User completes a task interaction (as task owner or bidder)

    **Step 2:** User submits rating via `POST /ratings` with task ID, rated user ID, rating (1-5), and rating type

    **Step 3:** System validates authorization (only task participants can rate each other)

    **Step 4:** Rating is created and stored with timestamp

    **Step 5:** Users can view ratings via `GET /ratings/user/{userId}` or get statistics via `GET
    /ratings/user/{userId}/stats`

    **Step 6:** Users can update their own ratings via `PATCH /ratings/{id}` or delete via `DELETE /ratings/{id}`
  version: 1.0.0
servers:
  - url: http://172.20.224.1:5000/api/v1
    description: Local development server
tags:
  - name: Authentication
    description: Authentication endpoints for login, password management, and email verification
  - name: User Management
    description: User registration, profile management, and user operations
  - name: Rating System
    description: Rating and review system for user interactions and task completion
  - name: Task Management
    description: Task creation, management, and tracking operations

# ===================================================
# üß© COMPONENTS: Reusable Schemas and Responses
# ===================================================

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated requests

  # ---------------------------------------------------
  # üì¶ SCHEMAS: Data models and definitions
  # ---------------------------------------------------
  schemas:
    # ‚úèÔ∏è Schema for Task
    Task:
      type: object
      required:
        - title
        - taskCategory
        - description
        - taskBudget
        - taskLocation
        - status
        - userId
      properties:
        _id:
          type: string
          example: 64f123abc456def789012345
        title:
          type: string
          example: Fix the car engine
        taskCategory:
          type: string
          example: Maintenance
        description:
          type: string
          example: Engine requires a full service
        taskImage:
          type: string
          example: https://example.com/image.jpg
        taskBudget:
          type: number
          example: 150
        taskLocation:
          type: string
          example: Dhaka
        dueDate:
          type: string
          format: date
          example: '2025-09-01'
        status:
          type: string
          enum:
            - pending
            - in-progress
            - completed
          example: pending
        userId:
          type: string
          example: 64f123abc456def789012346
        createdAt:
          type: string
          format: date-time
          example: '2025-08-23T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-08-23T12:00:00Z'

    # ‚úèÔ∏è Schema for TaskUpdate
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          example: Fix the car engine
        taskCategory:
          type: string
          example: Maintenance
        description:
          type: string
          example: Engine requires a full service
        taskImage:
          type: string
          example: https://example.com/image.jpg
        taskBudget:
          type: number
          example: 150
        taskLocation:
          type: string
          example: Dhaka
        dueDate:
          type: string
          format: date
          example: '2025-09-01'
        status:
          type: string
          enum:
            - pending
            - in-progress
            - completed
          example: pending

    # ‚úèÔ∏è Schema for CreateUserRequest
    CreateUserRequest:
      type: object
      required:
        - name
        - role
        - email
        - password
        - location
      properties:
        name:
          type: string
          example: John Doe
          description: Full name of the user
        role:
          type: string
          enum: [jobPoster, tasker] # üëà Dropdown will appear in Swagger UI
          example: tasker
        email:
          type: string
          format: email
          example: john@example.com
          description: Email address (must be unique)
        password:
          type: string
          format: password
          minLength: 8
          example: StrongPassword123
          description: Password (minimum 8 characters)
        location:
          type: string
          example: New York, USA
          description: User's location
        profile:
          type: string
          description: Optional profile image URL

    # ‚úèÔ∏è Schema for UpdateProfileRequest
    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe Updated
        contact:
          type: string
          example: '+1234567891'
        email:
          type: string
          format: email
          example: john.updated@example.com
        location:
          type: string
          example: Los Angeles, USA
        image:
          type: string
          format: binary
          description: Profile image file

    # ‚úèÔ∏è Schema for UserResponse
    UserResponse:
      type: object
      properties:
        _id:
          type: string
          example: 64f8a1b2c3d4e5f6a7b8c9d0
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        contact:
          type: string
          example: '+1234567890'
        location:
          type: string
          example: New York, USA
        role:
          type: string
          enum:
            - SUPER_ADMIN
            - ADMIN
            - USER
          example: USER
        image:
          type: string
          example: https://i.ibb.co/z5YHLV9/profile.png
        status:
          type: string
          enum:
            - active
            - delete
          example: active
        verified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # ‚úèÔ∏è Schema for LoginRequest
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: StrongPassword123

    # ‚úèÔ∏è Schema for VerifyEmailRequest
    VerifyEmailRequest:
      type: object
      required:
        - email
        - oneTimeCode
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        oneTimeCode:
          type: number
          example: 123456
          description: 6-digit OTP code sent to email

    # ‚úèÔ∏è Schema for ForgetPasswordRequest
    ForgetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: john@example.com

    # ‚úèÔ∏è Schema for ResetPasswordRequest
    ResetPasswordRequest:
      type: object
      required:
        - newPassword
        - confirmPassword
      properties:
        newPassword:
          type: string
          format: password
          minLength: 8
          example: NewStrongPassword123
        confirmPassword:
          type: string
          format: password
          example: NewStrongPassword123
          description: Must match newPassword

    # ‚úèÔ∏è Schema for ChangePasswordRequest
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
          example: CurrentPassword123
        newPassword:
          type: string
          format: password
          minLength: 8
          example: NewStrongPassword123

    # ‚úèÔ∏è Schema for CreateRatingRequest
    CreateRatingRequest:
      type: object
      required:
        - taskId
        - ratedUserId
        - rating
        - ratingType
      properties:
        taskId:
          type: string
          example: 64f8a1b2c3d4e5f6a7b8c9d0
          description: ID of the task for which the rating is given
        ratedUserId:
          type: string
          example: 64f8a1b2c3d4e5f6a7b8c9d1
          description: ID of the user being rated
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 5
          description: Rating value from 1 to 5 stars
        comment:
          type: string
          maxLength: 500
          example: Excellent work and great communication!
          description: Optional comment about the rating
        ratingType:
          type: string
          enum:
            - task_completion
            - communication
            - quality
            - timeliness
          example: task_completion
          description: Type of rating being given

    # ‚úèÔ∏è Schema for UpdateRatingRequest
    UpdateRatingRequest:
      type: object
      properties:
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        comment:
          type: string
          maxLength: 500
          example: Updated comment about the work
        ratingType:
          type: string
          enum:
            - task_completion
            - communication
            - quality
            - timeliness
          example: communication

    # ‚úèÔ∏è Schema for RatingResponse
    RatingResponse:
      type: object
      properties:
        _id:
          type: string
          example: 64f8a1b2c3d4e5f6a7b8c9d2
        taskId:
          type: object
          properties:
            _id:
              type: string
              example: 64f8a1b2c3d4e5f6a7b8c9d0
            title:
              type: string
              example: Fix the car engine
            description:
              type: string
              example: Engine requires a full service
        raterId:
          type: object
          properties:
            _id:
              type: string
              example: 64f8a1b2c3d4e5f6a7b8c9d3
            name:
              type: string
              example: John Doe
            email:
              type: string
              example: john@example.com
            image:
              type: string
              example: https://i.ibb.co/z5YHLV9/profile.png
        ratedUserId:
          type: object
          properties:
            _id:
              type: string
              example: 64f8a1b2c3d4e5f6a7b8c9d1
            name:
              type: string
              example: Jane Smith
            email:
              type: string
              example: jane@example.com
            image:
              type: string
              example: https://i.ibb.co/z5YHLV9/profile.png
        rating:
          type: number
          example: 5
        comment:
          type: string
          example: Excellent work and great communication!
        ratingType:
          type: string
          enum:
            - task_completion
            - communication
            - quality
            - timeliness
          example: task_completion
        status:
          type: string
          enum:
            - active
            - deleted
          example: active
        createdAt:
          type: string
          format: date-time
          example: '2025-08-23T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-08-23T12:00:00Z'

    # ‚úèÔ∏è Schema for RatingStatsResponse
    RatingStatsResponse:
      type: object
      properties:
        averageRating:
          type: number
          example: 4.5
          description: Average rating score
        totalRatings:
          type: number
          example: 25
          description: Total number of ratings received
        ratingBreakdown:
          type: object
          properties:
            '1':
              type: number
              example: 1
            '2':
              type: number
              example: 2
            '3':
              type: number
              example: 3
            '4':
              type: number
              example: 8
            '5':
              type: number
              example: 11
          description: Count of ratings by star value
        ratingsByType:
          type: object
          properties:
            task_completion:
              type: number
              example: 8
            communication:
              type: number
              example: 6
            quality:
              type: number
              example: 7
            timeliness:
              type: number
              example: 4
          description: Count of ratings by type

    # ‚úèÔ∏è Schema for LoginResponse
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        statusCode:
          type: number
          example: 200
        message:
          type: string
          example: User logged in successfully.
        data:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: JWT access token

    # ‚úèÔ∏è Schema for SuccessResponse
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        statusCode:
          type: number
          example: 200
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object
          description: Response data (varies by endpoint)

    # ‚úèÔ∏è Schema for ErrorResponse
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: Error message
        errorMessages:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              message:
                type: string

    # ‚úèÔ∏è Schema for Bid
    Bid:
      type: object
      required:
        - taskId
        - userId
        - bidAmount
        - proposal
      properties:
        _id:
          type: string
          example: 64f123abc456def789012345
        taskId:
          type: string
          example: 64f123abc456def789012346
          description: ID of the task being bid on
        userId:
          type: string
          example: 64f123abc456def789012347
          description: ID of the user making the bid
        bidAmount:
          type: number
          example: 120
          description: Amount being bid for the task
        proposal:
          type: string
          example: I can complete this task efficiently with high quality
          description: Proposal description for the bid
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
          example: pending
        createdAt:
          type: string
          format: date-time
          example: '2025-08-23T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-08-23T12:00:00Z'

    # ‚úèÔ∏è Schema for CreateBidRequest
    CreateBidRequest:
      type: object
      required:
        - taskId
        - bidAmount
        - proposal
      properties:
        taskId:
          type: string
          example: 64f123abc456def789012346
        bidAmount:
          type: number
          example: 120
        proposal:
          type: string
          example: I can complete this task efficiently with high quality

    # ‚úèÔ∏è Schema for UpdateBidRequest
    UpdateBidRequest:
      type: object
      properties:
        bidAmount:
          type: number
          example: 130
        proposal:
          type: string
          example: Updated proposal with better terms
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
          example: accepted

    # ‚úèÔ∏è Schema for Report
    Report:
      type: object
      required:
        - reportedUserId
        - reportType
        - description
      properties:
        _id:
          type: string
          example: 64f123abc456def789012345
        reporterId:
          type: string
          example: 64f123abc456def789012346
          description: ID of the user making the report
        reportedUserId:
          type: string
          example: 64f123abc456def789012347
          description: ID of the user being reported
        reportType:
          type: string
          enum:
            - spam
            - inappropriate_behavior
            - fraud
            - other
          example: inappropriate_behavior
        description:
          type: string
          example: User was using inappropriate language
        status:
          type: string
          enum:
            - pending
            - reviewed
            - resolved
          example: pending
        createdAt:
          type: string
          format: date-time
          example: '2025-08-23T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-08-23T12:00:00Z'

    # ‚úèÔ∏è Schema for CreateReportRequest
    CreateReportRequest:
      type: object
      required:
        - reportedUserId
        - reportType
        - description
      properties:
        reportedUserId:
          type: string
          example: 64f123abc456def789012347
        reportType:
          type: string
          enum:
            - spam
            - inappropriate_behavior
            - fraud
            - other
          example: inappropriate_behavior
        description:
          type: string
          example: User was using inappropriate language

    # ‚úèÔ∏è Schema for UpdateReportRequest
    UpdateReportRequest:
      type: object
      properties:
        reportType:
          type: string
          enum:
            - spam
            - inappropriate_behavior
            - fraud
            - other
          example: fraud
        description:
          type: string
          example: Updated description of the issue
        status:
          type: string
          enum:
            - pending
            - reviewed
            - resolved
          example: reviewed

    # ‚úèÔ∏è Schema for CreateTaskRequest
    CreateTaskRequest:
      type: object
      required:
        - title
        - description
        - taskCategory
        - taskLocation
        - budget
      properties:
        title:
          type: string
          example: 'Fix my leaky faucet'
        description:
          type: string
          example: 'Need someone to fix a leaky kitchen faucet'
        taskCategory:
          type: string
          example: 'plumbing'
        taskLocation:
          type: string
          example: 'New York, NY'
        budget:
          type: number
          example: 150.00
        deadline:
          type: string
          format: date-time
          example: '2025-01-15T10:00:00Z'
        requirements:
          type: array
          items:
            type: string
          example: ['Licensed plumber', 'Available weekends']

    # ‚úèÔ∏è Schema for BidResponse
    BidResponse:
      type: object
      properties:
        _id:
          type: string
          example: '64f123abc456def789012345'
        taskId:
          type: string
          example: '64f123abc456def789012346'
        bidderId:
          type: string
          example: '64f123abc456def789012347'
        bidAmount:
          type: number
          example: 120.00
        message:
          type: string
          example: 'I can fix your faucet within 2 hours'
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
          example: 'pending'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-10T14:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-10T14:30:00Z'

    # ‚úèÔ∏è Schema for ReportResponse
    ReportResponse:
      type: object
      properties:
        _id:
          type: string
          example: '64f123abc456def789012348'
        reporterId:
          type: string
          example: '64f123abc456def789012349'
        reportedUserId:
          type: string
          example: '64f123abc456def789012347'
        reportType:
          type: string
          enum:
            - spam
            - inappropriate_behavior
            - fraud
            - other
          example: 'inappropriate_behavior'
        description:
          type: string
          example: 'User was using inappropriate language'
        status:
          type: string
          enum:
            - pending
            - reviewed
            - resolved
          example: 'pending'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-10T15:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-10T15:00:00Z'

paths:
  # ===================================================
  # AUTHENTICATION MODULE ‚Äî Authentication related endpoints
  # ===================================================

  # ---------------------------------------------------
  # üîµ POST /auth/change-password ‚Äî Change password (authenticated)
  # ---------------------------------------------------
  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password (authenticated)
      description: |-
        Change password for authenticated users.
        Requires current password for verification.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'

      # ---------------------------------------------------
      # üìú RESPONSES: Reusable response definitions
      # ---------------------------------------------------
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Your password has been successfully changed
        '400':
          description: Invalid current password or password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ---------------------------------------------------
  # üîµ POST /auth/forget-password ‚Äî Request password reset
  # ---------------------------------------------------
  /auth/forget-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: |-
        Send OTP to user's email for password reset.
        User must verify OTP before resetting password.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPasswordRequest'
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Please check your email. We have sent you a one-time passcode (OTP).
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ---------------------------------------------------
  # üîµ POST /auth/login ‚Äî User login
  # ---------------------------------------------------
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |-
        Authenticate user with email and password.
        Returns JWT access token for subsequent requests.
        User must have verified email to login.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials or unverified account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ---------------------------------------------------
  # üîµ POST /auth/reset-password ‚Äî Reset password with token
  # ---------------------------------------------------
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      description: |-
        Reset user password using reset token obtained from email verification.
        Token is provided in Authorization header.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
        üß≠ This endpoint is typically called after /auth/verify-email
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Your password has been successfully reset.
        '400':
          description: Invalid token or password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ---------------------------------------------------
  # üîµ POST /auth/verify-email ‚Äî Verify email with OTP
  # ---------------------------------------------------
  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email with OTP
      description: |-
        Verify user email using OTP code sent to email.
        Used for both account verification and password reset verification.
        Returns reset token if used for password reset flow.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
        üß≠ This endpoint is typically called after /auth/login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Email verify successfully
                      data:
                        type: string
                        description: Reset token (only for password reset flow)
                        example: resetToken123
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===================================================
  # RATING SYSTEM MODULE ‚Äî Rating System related endpoints
  # ===================================================

  /ratings:
    # ---------------------------------------------------
    # üîµ POST /ratings ‚Äî Create a new rating
    # ---------------------------------------------------
    post:
      tags:
        - Rating System
      summary: Create a new rating
      description: |-
        Create a rating for a user based on task completion

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRatingRequest'
      responses:
        '201':
          description: Rating created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Rating created successfully
                  data:
                    $ref: '#/components/schemas/RatingResponse'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - cannot rate yourself
        '404':
          description: Task or user not found
        '409':
          description: Conflict - rating already exists
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üü¢ GET /ratings ‚Äî Get all ratings
    # ---------------------------------------------------
    get:
      tags:
        - Rating System
      summary: Get all ratings
      description: |-
        Retrieve all ratings with pagination and filtering

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
          description: Field to sort by
        - name: sortOrder
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: ratingType
          in: query
          schema:
            type: string
            enum:
              - task_completion
              - communication
              - quality
              - timeliness
          description: Filter by rating type
        - name: rating
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 5
          description: Filter by rating value
      responses:
        '200':
          description: Ratings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Ratings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingResponse'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 50
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /ratings/my-ratings ‚Äî Get current user's ratings
  # ---------------------------------------------------
  /ratings/my-ratings:
    get:
      tags:
        - Rating System
      summary: Get current user's ratings
      description: |-
        Retrieve all ratings received by the currently authenticated user

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: ratingType
          in: query
          schema:
            type: string
            enum:
              - task_completion
              - communication
              - quality
              - timeliness
      responses:
        '200':
          description: My ratings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: My ratings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingResponse'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 12
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /ratings/task/{taskId} ‚Äî Get ratings for a specific task
  # ---------------------------------------------------
  /ratings/task/{taskId}:
    get:
      tags:
        - Rating System
      summary: Get ratings for a specific task
      description: |-
        Retrieve all ratings for a specific task

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: Task ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Task ratings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task ratings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingResponse'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 8
        '401':
          description: Unauthorized
        '404':
          description: Task not found
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /ratings/user/{userId} ‚Äî Get ratings for a specific user
  # ---------------------------------------------------
  /ratings/user/{userId}:
    get:
      tags:
        - Rating System
      summary: Get ratings for a specific user
      description: |-
        Retrieve all ratings received by a specific user

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: ratingType
          in: query
          schema:
            type: string
            enum:
              - task_completion
              - communication
              - quality
              - timeliness
      responses:
        '200':
          description: User ratings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User ratings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingResponse'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 15
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /ratings/user/{userId}/stats ‚Äî Get user rating statistics
  # ---------------------------------------------------
  /ratings/user/{userId}/stats:
    get:
      tags:
        - Rating System
      summary: Get user rating statistics
      description: |-
        Retrieve comprehensive rating statistics for a specific user

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User rating statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User rating statistics retrieved successfully
                  data:
                    $ref: '#/components/schemas/RatingStatsResponse'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /ratings/{ratingId}:
    # ---------------------------------------------------
    # üü¢ GET /ratings/{ratingId} ‚Äî Get a specific rating
    # ---------------------------------------------------
    get:
      tags:
        - Rating System
      summary: Get a specific rating
      description: |-
        Retrieve a single rating by its ID

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: string
          description: Rating ID
      responses:
        '200':
          description: Rating retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Rating retrieved successfully
                  data:
                    $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized
        '404':
          description: Rating not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üü† PUT /ratings/{ratingId} ‚Äî Update a rating
    # ---------------------------------------------------
    put:
      tags:
        - Rating System
      summary: Update a rating
      description: |-
        Update an existing rating (only by the rater)

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: string
          description: Rating ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRatingRequest'
      responses:
        '200':
          description: Rating updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Rating updated successfully
                  data:
                    $ref: '#/components/schemas/RatingResponse'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - not the rating owner
        '404':
          description: Rating not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üî¥ DELETE /ratings/{ratingId} ‚Äî Delete a rating
    # ---------------------------------------------------
    delete:
      tags:
        - Rating System
      summary: Delete a rating
      description: |-
        Delete a rating (only by the rater or admin)

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: string
          description: Rating ID
      responses:
        '200':
          description: Rating deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Rating deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - not authorized to delete
        '404':
          description: Rating not found
        '500':
          description: Internal server error

  # ===================================================
  # USER MANAGEMENT MODULE ‚Äî User Management related endpoints
  # ===================================================

  # ---------------------------------------------------
  # üîµ POST /user/ ‚Äî Create a new user account
  # ---------------------------------------------------

  /user:
    post:
      tags:
        - User Management
      summary: Register a new user account
      description: |-
        Create a new user account.  
        The `role` field determines if the user is a **Job Poster** or a **Tasker**.  

        - After registration, the user receives an OTP verification email  
        - Account is created but not verified  
        - Email verification is required before login  

        ‚è≥ This method modifies data. Apply rate limiting to protect the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: 'John Doe'
              email: 'john@example.com'
              password: 'securePass123'
              role: 'tasker'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: User created successfully
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/profile:
    # ---------------------------------------------------
    # üü¢ GET /user/profile ‚Äî Get current user profile
    # ---------------------------------------------------
    get:
      tags:
        - User Management
      summary: Get current user profile
      description: |-
        Retrieve the authenticated user's profile information

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Profile data retrieved successfully
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    # ---------------------------------------------------
    # üü° PATCH /user/profile ‚Äî Update user profile
    # ---------------------------------------------------
    patch:
      tags:
        - User Management
      summary: Update user profile
      description: |-
        Update the authenticated user's profile information.
        Supports file upload for profile image.

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: JSON string containing profile update data
                  example: '{"name":"Updated Name","contact":"+1234567891"}'
                image:
                  type: string
                  format: binary
                  description: Profile image file
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: Profile updated successfully
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===================================================
  # BID MODULE ‚Äî Bid Management related endpoints
  # ===================================================

  # ---------------------------------------------------
  # üîµ POST /bids ‚Äî Create a new bid
  # ---------------------------------------------------
  /bids:
    post:
      tags:
        - Bid Management
      summary: Create a new bid
      description: |-
        Create a new bid for a specific task

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBidRequest'
      responses:
        '201':
          description: Bid created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bid created successfully
                  data:
                    $ref: '#/components/schemas/BidResponse'
        '400':
          description: Bad request - validation error
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /bids/task/{taskId} ‚Äî Get all bids for a task
  # ---------------------------------------------------
  /bids/task/{taskId}:
    get:
      tags:
        - Bid Management
      summary: Get all bids for a specific task
      description: |-
        Retrieve all bids submitted for a specific task

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task
      responses:
        '200':
          description: Bids retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bids retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BidResponse'
        '404':
          description: Task not found
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /bids/{bidId} ‚Äî Get bid by ID
  # ---------------------------------------------------
  /bids/{bidId}:
    get:
      tags:
        - Bid Management
      summary: Get bid by ID
      description: |-
        Retrieve a specific bid by its ID

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: bidId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the bid
      responses:
        '200':
          description: Bid retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bid retrieved successfully
                  data:
                    $ref: '#/components/schemas/BidResponse'
        '404':
          description: Bid not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üîµ PUT /bids/{bidId} ‚Äî Update bid by ID
    # ---------------------------------------------------
    put:
      tags:
        - Bid Management
      summary: Update bid by ID
      description: |-
        Update a specific bid by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: bidId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the bid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBidRequest'
      responses:
        '200':
          description: Bid updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bid updated successfully
                  data:
                    $ref: '#/components/schemas/BidResponse'
        '400':
          description: Bad request - validation error
        '404':
          description: Bid not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üî¥ DELETE /bids/{bidId} ‚Äî Delete bid by ID
    # ---------------------------------------------------
    delete:
      tags:
        - Bid Management
      summary: Delete bid by ID
      description: |-
        Delete a specific bid by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: bidId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the bid
      responses:
        '200':
          description: Bid deleted successfully
        '404':
          description: Bid not found
        '500':
          description: Internal server error

  # ===================================================
  # TASK MODULE ‚Äî Task Management related endpoints
  # ===================================================

  # ---------------------------------------------------
  # üîµ POST /tasks ‚Äî Create a new task
  # ---------------------------------------------------
  /tasks:
    post:
      tags:
        - Task Management
      summary: Create a new task
      description: |-
        Create a new task

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task created successfully
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Bad request - validation error
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üü¢ GET /tasks ‚Äî Get all tasks
    # ---------------------------------------------------
    get:
      tags:
        - Task Management
      summary: Get all tasks
      description: |-
        Retrieve all tasks with optional filtering and pagination

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [open, in_progress, completed, cancelled]
          description: Filter by task status
        - name: category
          in: query
          required: false
          schema:
            type: string
          description: Filter by task category
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [createdAt, updatedAt, budget, title]
            default: createdAt
          description: Sort tasks by field
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Tasks retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /tasks/{taskId} ‚Äî Get task by ID
  # ---------------------------------------------------
  /tasks/{taskId}:
    get:
      tags:
        - Task Management
      summary: Get task by ID
      description: |-
        Retrieve a specific task by its ID

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task retrieved successfully
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üîµ PUT /tasks/{taskId} ‚Äî Update task
    # ---------------------------------------------------
    put:
      tags:
        - Task Management
      summary: Update task
      description: |-
        Update a specific task by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task updated successfully
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Bad request - validation error
        '404':
          description: Task not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üî¥ DELETE /tasks/{taskId} ‚Äî Delete task
    # ---------------------------------------------------
    delete:
      tags:
        - Task Management
      summary: Delete task
      description: |-
        Delete a specific task by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found
        '500':
          description: Internal server error

  # ===================================================
  # REPORT MODULE ‚Äî Report Management related endpoints
  # ===================================================

  # ---------------------------------------------------
  # üîµ POST /reports ‚Äî Create a new report
  # ---------------------------------------------------
  /reports:
    post:
      tags:
        - Report Management
      summary: Create a new report
      description: |-
        Create a new report

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '201':
          description: Report created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Report created successfully
                  data:
                    $ref: '#/components/schemas/ReportResponse'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üü¢ GET /reports ‚Äî Get all reports
    # ---------------------------------------------------
    get:
      tags:
        - Report Management
      summary: Get all reports
      description: |-
        Retrieve all reports with optional filtering and pagination

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, reviewed, resolved]
          description: Filter by report status
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Filter by report type
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [createdAt, updatedAt, status]
            default: createdAt
          description: Sort reports by field
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Reports retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReportResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ---------------------------------------------------
  # üü¢ GET /reports/{reportId} ‚Äî Get report by ID
  # ---------------------------------------------------
  /reports/{reportId}:
    get:
      tags:
        - Report Management
      summary: Get report by ID
      description: |-
        Retrieve a specific report by its ID

        ‚ö° This GET endpoint is cacheable. Consider caching responses.
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the report
      responses:
        '200':
          description: Report retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Report retrieved successfully
                  data:
                    $ref: '#/components/schemas/ReportResponse'
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üîµ PUT /reports/{reportId} ‚Äî Update report
    # ---------------------------------------------------
    put:
      tags:
        - Report Management
      summary: Update report
      description: |-
        Update a specific report by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportRequest'
      responses:
        '200':
          description: Report updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Report updated successfully
                  data:
                    $ref: '#/components/schemas/ReportResponse'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Internal server error

    # ---------------------------------------------------
    # üî¥ DELETE /reports/{reportId} ‚Äî Delete report
    # ---------------------------------------------------
    delete:
      tags:
        - Report Management
      summary: Delete report
      description: |-
        Delete a specific report by its ID

        ‚è≥ This method modifies data. Apply appropriate rate limiting to protect the server.
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the report
      responses:
        '200':
          description: Report deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Internal server error
security:
  - BearerAuth: []
